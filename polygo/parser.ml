type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LBRACKET
  | RBRACKET
  | LLBRACKET
  | RRBRACKET
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | PLUSONE
  | MINUSONE
  | MODULUS
  | VB
  | ASSIGN
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | NOT
  | RETURN
  | IF
  | ELSE
  | FOR
  | FOREACH
  | IN
  | WHILE
  | INT
  | FLOAT
  | BOOL
  | COMPLEX
  | POLY
  | STRING
  | VOID
  | INTLIT of (int)
  | FLOATLIT of (float)
  | ID of (string)
  | STRINGLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 57 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LBRACKET *);
  264 (* RBRACKET *);
  265 (* LLBRACKET *);
  266 (* RRBRACKET *);
  267 (* PLUS *);
  268 (* MINUS *);
  269 (* TIMES *);
  270 (* DIVIDE *);
  271 (* PLUSONE *);
  272 (* MINUSONE *);
  273 (* MODULUS *);
  274 (* VB *);
  275 (* ASSIGN *);
  276 (* EQ *);
  277 (* NEQ *);
  278 (* LT *);
  279 (* LEQ *);
  280 (* GT *);
  281 (* GEQ *);
  282 (* TRUE *);
  283 (* FALSE *);
  284 (* AND *);
  285 (* OR *);
  286 (* NOT *);
  287 (* RETURN *);
  288 (* IF *);
  289 (* ELSE *);
  290 (* FOR *);
  291 (* FOREACH *);
  292 (* IN *);
  293 (* WHILE *);
  294 (* INT *);
  295 (* FLOAT *);
  296 (* BOOL *);
  297 (* COMPLEX *);
  298 (* POLY *);
  299 (* STRING *);
  300 (* VOID *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  301 (* INTLIT *);
  302 (* FLOATLIT *);
  303 (* ID *);
  304 (* STRINGLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\005\000\005\000\005\000\
\005\000\005\000\009\000\009\000\009\000\010\000\010\000\011\000\
\011\000\006\000\006\000\007\000\007\000\003\000\003\000\003\000\
\003\000\008\000\008\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\012\000\012\000\012\000\012\000\012\000\013\000\013\000\
\021\000\021\000\020\000\020\000\020\000\019\000\019\000\019\000\
\022\000\022\000\018\000\018\000\017\000\017\000\016\000\016\000\
\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\004\000\001\000\
\003\000\000\000\001\000\000\000\002\000\003\000\005\000\006\000\
\010\000\001\000\002\000\002\000\002\000\003\000\007\000\011\000\
\011\000\007\000\007\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\002\000\002\000\004\000\
\003\000\001\000\003\000\001\000\001\000\001\000\000\000\001\000\
\001\000\003\000\001\000\005\000\001\000\001\000\004\000\004\000\
\001\000\001\000\000\000\001\000\001\000\003\000\000\000\001\000\
\002\000"

let yydefred = "\000\000\
\002\000\000\000\081\000\000\000\011\000\012\000\007\000\013\000\
\009\000\008\000\010\000\001\000\003\000\004\000\000\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\016\000\000\000\000\000\000\000\061\000\060\000\073\000\
\074\000\000\000\062\000\000\000\069\000\058\000\067\000\000\000\
\014\000\000\000\000\000\000\000\000\000\065\000\000\000\000\000\
\000\000\000\000\023\000\000\000\020\000\000\000\017\000\059\000\
\000\000\000\000\000\000\000\000\024\000\000\000\000\000\015\000\
\066\000\000\000\072\000\071\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\000\000\000\000\036\000\026\000\000\000\000\000\
\068\000\000\000\000\000\000\000\052\000\054\000\055\000\053\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\005\000\027\000\028\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\038\000\037\000\030\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\042\000\051\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\025\000\000\000\000\000\000\000\000\000\
\000\000\056\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\034\000\035\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\033\000"

let yydgoto = "\002\000\
\003\000\004\000\013\000\014\000\023\000\024\000\063\000\084\000\
\016\000\026\000\027\000\085\000\045\000\086\000\087\000\128\000\
\132\000\133\000\088\000\038\000\047\000\039\000"

let yysindex = "\009\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\255\101\255\
\092\255\068\255\000\000\222\000\009\255\108\255\073\255\118\255\
\117\255\000\000\122\255\060\255\056\255\000\000\000\000\000\000\
\000\000\018\255\000\000\128\255\000\000\000\000\000\000\085\255\
\000\000\136\255\135\255\222\000\139\255\000\000\142\255\145\255\
\120\255\123\255\000\000\059\255\000\000\132\255\000\000\000\000\
\060\255\056\255\167\255\171\255\000\000\183\255\115\255\000\000\
\000\000\163\255\000\000\000\000\060\255\229\000\060\255\229\000\
\229\000\229\000\229\000\088\255\184\255\189\255\148\255\196\255\
\019\255\000\000\153\255\162\255\000\000\000\000\065\001\193\255\
\000\000\194\255\026\002\197\255\000\000\000\000\000\000\000\000\
\000\000\090\001\229\000\229\000\177\255\229\000\229\000\069\255\
\000\000\000\000\000\000\229\000\229\000\229\000\229\000\229\000\
\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\
\229\000\217\255\000\000\000\000\000\000\049\002\091\002\219\255\
\229\000\072\002\091\002\216\255\220\255\055\255\055\255\000\000\
\000\000\000\000\007\000\007\000\159\255\159\255\159\255\159\255\
\128\002\110\002\091\002\000\000\223\255\229\000\012\255\228\255\
\229\000\000\000\192\000\115\001\192\000\192\000\091\002\199\255\
\229\000\236\255\044\000\191\255\225\255\000\000\000\000\231\255\
\233\255\192\000\192\000\081\000\118\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\255\
\000\000\000\000\000\000\239\255\000\000\000\000\000\000\000\000\
\192\255\000\000\246\255\245\255\000\000\000\000\000\000\000\000\
\000\000\014\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\104\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\248\255\000\000\248\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\011\001\000\000\000\000\000\000\000\000\000\000\000\000\040\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\000\000\000\000\000\005\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\061\255\000\000\
\000\000\000\000\213\255\013\000\000\000\144\001\173\001\000\000\
\000\000\000\000\003\002\007\002\185\001\214\001\224\001\253\001\
\070\255\008\255\179\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\251\255\000\000\
\019\000\000\000\000\000\155\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\190\000\000\000\003\000\000\000\000\000\224\255\
\041\000\216\000\000\000\240\000\010\000\180\255\186\255\104\000\
\140\000\000\000\252\255\006\000\000\000\250\255"

let yytablesize = 921
let yytable = "\091\000\
\012\000\093\000\094\000\095\000\096\000\098\000\015\000\106\000\
\050\000\001\000\050\000\050\000\028\000\050\000\070\000\157\000\
\037\000\153\000\070\000\070\000\103\000\070\000\048\000\037\000\
\049\000\049\000\050\000\050\000\126\000\127\000\029\000\130\000\
\131\000\046\000\030\000\031\000\050\000\134\000\135\000\136\000\
\137\000\138\000\139\000\140\000\141\000\142\000\143\000\144\000\
\145\000\146\000\147\000\066\000\037\000\032\000\033\000\034\000\
\035\000\017\000\131\000\061\000\025\000\080\000\065\000\080\000\
\037\000\083\000\037\000\110\000\111\000\019\000\049\000\112\000\
\049\000\049\000\046\000\049\000\046\000\062\000\090\000\156\000\
\092\000\029\000\159\000\106\000\025\000\106\000\106\000\021\000\
\097\000\070\000\127\000\028\000\019\000\020\000\071\000\106\000\
\106\000\049\000\049\000\072\000\032\000\033\000\073\000\074\000\
\032\000\033\000\034\000\018\000\064\000\029\000\021\000\064\000\
\022\000\030\000\031\000\040\000\070\000\075\000\028\000\041\000\
\042\000\071\000\160\000\043\000\162\000\163\000\072\000\044\000\
\051\000\073\000\074\000\052\000\032\000\033\000\081\000\035\000\
\029\000\172\000\173\000\053\000\030\000\031\000\054\000\056\000\
\075\000\076\000\077\000\057\000\078\000\079\000\058\000\080\000\
\005\000\006\000\007\000\008\000\009\000\010\000\011\000\032\000\
\033\000\081\000\035\000\070\000\059\000\028\000\105\000\060\000\
\071\000\108\000\109\000\110\000\111\000\072\000\067\000\112\000\
\073\000\074\000\064\000\057\000\068\000\057\000\057\000\029\000\
\057\000\099\000\089\000\030\000\031\000\069\000\100\000\075\000\
\076\000\077\000\101\000\078\000\079\000\102\000\080\000\104\000\
\070\000\122\000\028\000\164\000\124\000\071\000\032\000\033\000\
\081\000\035\000\072\000\121\000\129\000\073\000\074\000\077\000\
\077\000\148\000\077\000\150\000\029\000\153\000\154\000\168\000\
\030\000\031\000\155\000\169\000\075\000\076\000\077\000\158\000\
\078\000\079\000\170\000\080\000\171\000\070\000\006\000\028\000\
\166\000\018\000\071\000\032\000\033\000\081\000\035\000\072\000\
\019\000\063\000\073\000\074\000\082\000\078\000\078\000\063\000\
\078\000\029\000\079\000\055\000\036\000\030\000\031\000\075\000\
\165\000\075\000\076\000\077\000\151\000\078\000\079\000\076\000\
\080\000\108\000\109\000\110\000\111\000\079\000\000\000\112\000\
\032\000\033\000\081\000\035\000\115\000\116\000\117\000\118\000\
\000\000\000\000\000\000\000\000\000\000\000\000\005\000\006\000\
\007\000\008\000\009\000\010\000\011\000\070\000\000\000\028\000\
\167\000\000\000\071\000\000\000\000\000\000\000\000\000\072\000\
\000\000\000\000\073\000\074\000\000\000\000\000\000\000\000\000\
\000\000\029\000\000\000\000\000\000\000\030\000\031\000\000\000\
\000\000\075\000\076\000\077\000\000\000\078\000\079\000\000\000\
\080\000\000\000\070\000\000\000\028\000\174\000\000\000\071\000\
\032\000\033\000\081\000\035\000\072\000\000\000\000\000\073\000\
\074\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
\000\000\000\000\030\000\031\000\000\000\000\000\075\000\076\000\
\077\000\000\000\078\000\079\000\000\000\080\000\000\000\070\000\
\000\000\028\000\175\000\000\000\071\000\032\000\033\000\081\000\
\035\000\072\000\000\000\000\000\073\000\074\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\000\000\000\000\030\000\
\031\000\000\000\000\000\075\000\076\000\077\000\000\000\078\000\
\079\000\000\000\080\000\000\000\031\000\000\000\031\000\031\000\
\000\000\031\000\032\000\033\000\081\000\035\000\031\000\000\000\
\000\000\031\000\031\000\000\000\000\000\000\000\000\000\000\000\
\031\000\000\000\000\000\000\000\031\000\031\000\000\000\000\000\
\031\000\031\000\031\000\000\000\031\000\031\000\000\000\031\000\
\000\000\070\000\000\000\028\000\000\000\000\000\071\000\031\000\
\031\000\031\000\031\000\072\000\000\000\000\000\073\000\074\000\
\000\000\000\000\000\000\000\000\000\000\029\000\000\000\000\000\
\000\000\030\000\031\000\000\000\000\000\075\000\076\000\077\000\
\000\000\078\000\079\000\000\000\080\000\000\000\070\000\000\000\
\028\000\000\000\000\000\071\000\032\000\033\000\081\000\035\000\
\072\000\000\000\000\000\073\000\074\000\000\000\000\000\000\000\
\000\000\000\000\029\000\000\000\000\000\000\000\030\000\031\000\
\000\000\000\000\075\000\005\000\006\000\007\000\008\000\009\000\
\010\000\011\000\000\000\070\000\000\000\070\000\070\000\000\000\
\070\000\032\000\033\000\081\000\035\000\070\000\070\000\070\000\
\070\000\000\000\000\000\070\000\000\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\000\000\000\000\070\000\070\000\
\069\000\000\000\069\000\069\000\000\000\069\000\000\000\000\000\
\000\000\000\000\069\000\069\000\069\000\069\000\000\000\000\000\
\069\000\000\000\000\000\069\000\069\000\069\000\069\000\069\000\
\069\000\107\000\000\000\069\000\069\000\000\000\000\000\000\000\
\000\000\000\000\000\000\108\000\109\000\110\000\111\000\000\000\
\000\000\112\000\000\000\000\000\113\000\114\000\115\000\116\000\
\117\000\118\000\125\000\000\000\119\000\120\000\000\000\000\000\
\000\000\000\000\000\000\000\000\108\000\109\000\110\000\111\000\
\000\000\000\000\112\000\000\000\000\000\113\000\114\000\115\000\
\116\000\117\000\118\000\161\000\000\000\119\000\120\000\000\000\
\000\000\000\000\000\000\000\000\000\000\108\000\109\000\110\000\
\111\000\000\000\000\000\112\000\000\000\000\000\113\000\114\000\
\115\000\116\000\117\000\118\000\000\000\000\000\119\000\120\000\
\039\000\000\000\039\000\039\000\000\000\039\000\000\000\000\000\
\000\000\000\000\039\000\039\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\000\039\000\039\000\039\000\039\000\
\039\000\000\000\000\000\039\000\039\000\040\000\000\000\040\000\
\040\000\000\000\040\000\000\000\000\000\000\000\000\000\040\000\
\040\000\045\000\000\000\045\000\045\000\000\000\045\000\000\000\
\040\000\040\000\040\000\040\000\040\000\040\000\000\000\000\000\
\040\000\040\000\000\000\000\000\045\000\045\000\045\000\045\000\
\045\000\045\000\000\000\000\000\045\000\045\000\046\000\000\000\
\046\000\046\000\000\000\046\000\000\000\000\000\000\000\000\000\
\047\000\000\000\047\000\047\000\000\000\047\000\000\000\000\000\
\000\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\
\000\000\046\000\046\000\047\000\047\000\047\000\047\000\047\000\
\047\000\000\000\000\000\047\000\047\000\048\000\000\000\048\000\
\048\000\000\000\048\000\043\000\000\000\043\000\043\000\044\000\
\043\000\044\000\044\000\000\000\044\000\000\000\000\000\000\000\
\048\000\048\000\048\000\048\000\048\000\048\000\043\000\043\000\
\048\000\048\000\044\000\044\000\123\000\000\000\043\000\043\000\
\000\000\000\000\044\000\044\000\108\000\109\000\110\000\111\000\
\000\000\000\000\112\000\000\000\000\000\113\000\114\000\115\000\
\116\000\117\000\118\000\149\000\000\000\119\000\120\000\000\000\
\000\000\000\000\000\000\108\000\109\000\110\000\111\000\000\000\
\000\000\112\000\000\000\000\000\113\000\114\000\115\000\116\000\
\117\000\118\000\152\000\000\000\119\000\120\000\000\000\000\000\
\000\000\000\000\108\000\109\000\110\000\111\000\000\000\000\000\
\112\000\000\000\000\000\113\000\114\000\115\000\116\000\117\000\
\118\000\000\000\000\000\119\000\120\000\108\000\109\000\110\000\
\111\000\000\000\000\000\112\000\000\000\000\000\113\000\114\000\
\115\000\116\000\117\000\118\000\000\000\000\000\119\000\120\000\
\108\000\109\000\110\000\111\000\000\000\000\000\112\000\000\000\
\000\000\113\000\114\000\115\000\116\000\117\000\118\000\000\000\
\000\000\119\000\108\000\109\000\110\000\111\000\000\000\000\000\
\112\000\000\000\000\000\113\000\114\000\115\000\116\000\117\000\
\118\000"

let yycheck = "\070\000\
\000\000\072\000\073\000\074\000\075\000\076\000\004\000\084\000\
\001\001\001\000\003\001\004\001\004\001\006\001\001\001\004\001\
\021\000\006\001\005\001\006\001\002\001\008\001\029\000\028\000\
\007\001\007\001\009\001\009\001\099\000\100\000\022\001\102\000\
\103\000\028\000\026\001\027\001\029\001\108\000\109\000\110\000\
\111\000\112\000\113\000\114\000\115\000\116\000\117\000\118\000\
\119\000\120\000\121\000\058\000\057\000\045\001\046\001\047\001\
\048\001\047\001\129\000\001\001\020\000\001\001\057\000\003\001\
\069\000\063\000\071\000\013\001\014\001\001\001\001\001\017\001\
\003\001\004\001\069\000\006\001\071\000\019\001\069\000\150\000\
\071\000\022\001\153\000\160\000\044\000\162\000\163\000\019\001\
\001\001\002\001\161\000\004\001\001\001\002\001\007\001\172\000\
\173\000\028\001\029\001\012\001\045\001\046\001\015\001\016\001\
\045\001\046\001\047\001\007\001\005\001\022\001\019\001\008\001\
\045\001\026\001\027\001\008\001\002\001\030\001\004\001\047\001\
\003\001\007\001\155\000\007\001\157\000\158\000\012\001\006\001\
\001\001\015\001\016\001\047\001\045\001\046\001\047\001\048\001\
\022\001\170\000\171\000\004\001\026\001\027\001\008\001\005\001\
\030\001\031\001\032\001\006\001\034\001\035\001\006\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\002\001\045\001\004\001\005\001\045\001\
\007\001\011\001\012\001\013\001\014\001\012\001\008\001\017\001\
\015\001\016\001\047\001\001\001\010\001\003\001\004\001\022\001\
\006\001\002\001\024\001\026\001\027\001\007\001\002\001\030\001\
\031\001\032\001\047\001\034\001\035\001\002\001\037\001\047\001\
\002\001\008\001\004\001\005\001\008\001\007\001\045\001\046\001\
\047\001\048\001\012\001\019\001\036\001\015\001\016\001\003\001\
\004\001\001\001\006\001\001\001\022\001\006\001\003\001\033\001\
\026\001\027\001\004\001\003\001\030\001\031\001\032\001\004\001\
\034\001\035\001\004\001\037\001\004\001\002\001\047\001\004\001\
\005\001\003\001\007\001\045\001\046\001\047\001\048\001\012\001\
\003\001\005\001\015\001\016\001\063\000\003\001\004\001\008\001\
\006\001\022\001\001\001\044\000\021\000\026\001\027\001\003\001\
\161\000\030\001\031\001\032\001\129\000\034\001\035\001\003\001\
\037\001\011\001\012\001\013\001\014\001\003\001\255\255\017\001\
\045\001\046\001\047\001\048\001\022\001\023\001\024\001\025\001\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\002\001\255\255\004\001\
\005\001\255\255\007\001\255\255\255\255\255\255\255\255\012\001\
\255\255\255\255\015\001\016\001\255\255\255\255\255\255\255\255\
\255\255\022\001\255\255\255\255\255\255\026\001\027\001\255\255\
\255\255\030\001\031\001\032\001\255\255\034\001\035\001\255\255\
\037\001\255\255\002\001\255\255\004\001\005\001\255\255\007\001\
\045\001\046\001\047\001\048\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\255\255\255\255\022\001\255\255\
\255\255\255\255\026\001\027\001\255\255\255\255\030\001\031\001\
\032\001\255\255\034\001\035\001\255\255\037\001\255\255\002\001\
\255\255\004\001\005\001\255\255\007\001\045\001\046\001\047\001\
\048\001\012\001\255\255\255\255\015\001\016\001\255\255\255\255\
\255\255\255\255\255\255\022\001\255\255\255\255\255\255\026\001\
\027\001\255\255\255\255\030\001\031\001\032\001\255\255\034\001\
\035\001\255\255\037\001\255\255\002\001\255\255\004\001\005\001\
\255\255\007\001\045\001\046\001\047\001\048\001\012\001\255\255\
\255\255\015\001\016\001\255\255\255\255\255\255\255\255\255\255\
\022\001\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\030\001\031\001\032\001\255\255\034\001\035\001\255\255\037\001\
\255\255\002\001\255\255\004\001\255\255\255\255\007\001\045\001\
\046\001\047\001\048\001\012\001\255\255\255\255\015\001\016\001\
\255\255\255\255\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\026\001\027\001\255\255\255\255\030\001\031\001\032\001\
\255\255\034\001\035\001\255\255\037\001\255\255\002\001\255\255\
\004\001\255\255\255\255\007\001\045\001\046\001\047\001\048\001\
\012\001\255\255\255\255\015\001\016\001\255\255\255\255\255\255\
\255\255\255\255\022\001\255\255\255\255\255\255\026\001\027\001\
\255\255\255\255\030\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\255\255\001\001\255\255\003\001\004\001\255\255\
\006\001\045\001\046\001\047\001\048\001\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\029\001\
\001\001\255\255\003\001\004\001\255\255\006\001\255\255\255\255\
\255\255\255\255\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\001\001\255\255\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\001\001\255\255\028\001\029\001\255\255\255\255\
\255\255\255\255\255\255\255\255\011\001\012\001\013\001\014\001\
\255\255\255\255\017\001\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\001\001\255\255\028\001\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\029\001\
\001\001\255\255\003\001\004\001\255\255\006\001\255\255\255\255\
\255\255\255\255\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\255\255\028\001\029\001\001\001\255\255\003\001\
\004\001\255\255\006\001\255\255\255\255\255\255\255\255\011\001\
\012\001\001\001\255\255\003\001\004\001\255\255\006\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\028\001\029\001\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\028\001\029\001\001\001\255\255\
\003\001\004\001\255\255\006\001\255\255\255\255\255\255\255\255\
\001\001\255\255\003\001\004\001\255\255\006\001\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\255\255\028\001\029\001\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\255\255\028\001\029\001\001\001\255\255\003\001\
\004\001\255\255\006\001\001\001\255\255\003\001\004\001\001\001\
\006\001\003\001\004\001\255\255\006\001\255\255\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\020\001\021\001\
\028\001\029\001\020\001\021\001\003\001\255\255\028\001\029\001\
\255\255\255\255\028\001\029\001\011\001\012\001\013\001\014\001\
\255\255\255\255\017\001\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\003\001\255\255\028\001\029\001\255\255\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\003\001\255\255\028\001\029\001\255\255\255\255\
\255\255\255\255\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\255\255\028\001\029\001\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\029\001\
\011\001\012\001\013\001\014\001\255\255\255\255\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\255\255\028\001\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LBRACKET\000\
  RBRACKET\000\
  LLBRACKET\000\
  RRBRACKET\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  PLUSONE\000\
  MINUSONE\000\
  MODULUS\000\
  VB\000\
  ASSIGN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  NOT\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  FOREACH\000\
  IN\000\
  WHILE\000\
  INT\000\
  FLOAT\000\
  BOOL\000\
  COMPLEX\000\
  POLY\000\
  STRING\000\
  VOID\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  FLOATLIT\000\
  ID\000\
  STRINGLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 39 "parser.mly"
           ( _1 )
# 520 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 42 "parser.mly"
                 ( [], [] )
# 526 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 43 "parser.mly"
               ( (_2 :: fst _1), snd _1 )
# 534 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 44 "parser.mly"
               ( fst _1, (_2 :: snd _1) )
# 542 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formal_list_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list_rev) in
    Obj.repr(
# 48 "parser.mly"
     ({ ftyp = _1;
	 fname = _2;
	 formals = _4;
	 locals = List.rev _7;
	 body = List.rev _8  })
# 557 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ_a) in
    Obj.repr(
# 55 "parser.mly"
        ( Typ_a( _1 ) )
# 564 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
        ( Bool )
# 570 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
          ( String )
# 576 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
        ( Poly )
# 582 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
        ( Void )
# 588 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
     ( Int )
# 594 "parser.ml"
               : 'typ_a))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
         ( Float )
# 600 "parser.ml"
               : 'typ_a))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
           ( Complex )
# 606 "parser.ml"
               : 'typ_a))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 67 "parser.mly"
                    ( Prim_f_decl( _1, _2 ) )
# 614 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ_a) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 68 "parser.mly"
                                  ( Arr_f_decl( _1, _4) )
# 622 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 71 "parser.mly"
                         ( [ _1 ] )
# 629 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 72 "parser.mly"
                            ( _3 :: _1 )
# 637 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
                  ( [] )
# 643 "parser.ml"
               : 'formal_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 76 "parser.mly"
                 ( List.rev _1 )
# 650 "parser.ml"
               : 'formal_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
   ( [] )
# 656 "parser.ml"
               : 'vdecl_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 80 "parser.mly"
                           (_2 :: _1)
# 664 "parser.ml"
               : 'vdecl_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 83 "parser.mly"
                                                 ( Primdecl(_1, _2) )
# 672 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'primary) in
    Obj.repr(
# 84 "parser.mly"
                                                ( Primdecl_i(_1, _2, _4) )
# 681 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'typ_a) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 85 "parser.mly"
                                                                    ( Arrdecl(_1, _5, _3) )
# 690 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : 'typ_a) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'primary_ap_list_opt) in
    Obj.repr(
# 86 "parser.mly"
                                                                                       ( Arrdecl_i(_1, _5, _3, List.rev _8) )
# 700 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 90 "parser.mly"
      ( [_1] )
# 707 "parser.ml"
               : 'stmt_list_rev))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list_rev) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 91 "parser.mly"
                      ( _2 :: _1 )
# 715 "parser.ml"
               : 'stmt_list_rev))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
           ( Expr _1 )
# 722 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
               ( Return Noexpr )
# 728 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                    ( Return _2 )
# 735 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list_rev) in
    Obj.repr(
# 97 "parser.mly"
                                                                  ( If( _3, List.rev _6, [] ) )
# 743 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'stmt_list_rev) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list_rev) in
    Obj.repr(
# 98 "parser.mly"
                                                                                      ( If( _3, List.rev _6, _10 ) )
# 752 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list_rev) in
    Obj.repr(
# 99 "parser.mly"
                                                                                  ( For(_3, _5, _7, List.rev _10 ) )
# 762 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list_rev) in
    Obj.repr(
# 100 "parser.mly"
                                                       ( Foreach(_4, List.rev _6) )
# 771 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list_rev) in
    Obj.repr(
# 101 "parser.mly"
                                                        ( While(_3, List.rev _6) )
# 779 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary) in
    Obj.repr(
# 104 "parser.mly"
              ( Primary( _1 ) )
# 786 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'primary_ap_list_opt) in
    Obj.repr(
# 106 "parser.mly"
                                           ( Arrlit( _2 ))
# 793 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                      ( _2 )
# 800 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                    ( Binop(_1, Add,   _3) )
# 808 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                    ( Binop(_1, Sub,   _3) )
# 816 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                    ( Binop(_1, Mult,  _3) )
# 824 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                    ( Binop(_1, Div,   _3) )
# 832 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                    ( Binop(_1, Equal, _3) )
# 840 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                    ( Binop(_1, Neq,   _3) )
# 848 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                    ( Binop(_1, Less,  _3) )
# 856 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                    ( Binop(_1, Leq,   _3) )
# 864 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                    ( Binop(_1, Greater, _3) )
# 872 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                    ( Binop(_1, Geq,   _3) )
# 880 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                    ( Binop(_1, And,   _3) )
# 888 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                    ( Binop(_1, Or,    _3) )
# 896 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                     ( Binop(_1, Mod,    _3) )
# 904 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                        ( Unop(Neg, _2) )
# 911 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                    ( Unop(Not, _2) )
# 918 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                ( Unop( Addone, _2 ) )
# 925 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                 ( Unop( Subone, _2 ) )
# 932 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list_opt) in
    Obj.repr(
# 128 "parser.mly"
                                  ( Call( _1, _3 ) )
# 940 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'extr_asn_value) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                              ( Asn( _1, _3 ) )
# 948 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_ap) in
    Obj.repr(
# 133 "parser.mly"
                  ( Prim_ap( _1 ) )
# 955 "parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'primary_ap_list_opt) in
    Obj.repr(
# 134 "parser.mly"
                                        ( Polylit( _2 ) )
# 962 "parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
                    ( Boollit( false ) )
# 968 "parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    Obj.repr(
# 136 "parser.mly"
                    ( Boollit( true ) )
# 974 "parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 137 "parser.mly"
               ( Strlit( _1 ) )
# 981 "parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "parser.mly"
   ( [] )
# 987 "parser.ml"
               : 'primary_ap_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_ap_list) in
    Obj.repr(
# 141 "parser.mly"
                   ( List.rev _1 )
# 994 "parser.ml"
               : 'primary_ap_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_ap) in
    Obj.repr(
# 144 "parser.mly"
             ( [ _1 ] )
# 1001 "parser.ml"
               : 'primary_ap_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'primary_ap_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'primary_ap) in
    Obj.repr(
# 145 "parser.mly"
                                    ( _3 :: _1 )
# 1009 "parser.ml"
               : 'primary_ap_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_c) in
    Obj.repr(
# 148 "parser.mly"
             ( Prim_c( _1 ) )
# 1016 "parser.ml"
               : 'primary_ap))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'primary_c) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'primary_c) in
    Obj.repr(
# 150 "parser.mly"
                                     ( Comp( _2, _4 ) )
# 1024 "parser.ml"
               : 'primary_ap))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'extr_asn_value) in
    Obj.repr(
# 151 "parser.mly"
                      ( Extr( _1 ) )
# 1031 "parser.ml"
               : 'primary_ap))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 154 "parser.mly"
       ( Id( _1 ))
# 1038 "parser.ml"
               : 'extr_asn_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 155 "parser.mly"
                                   ( Polyextr( _1, _3 ) )
# 1046 "parser.ml"
               : 'extr_asn_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 156 "parser.mly"
                                ( Arrextr( _1, _3 ) )
# 1054 "parser.ml"
               : 'extr_asn_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 159 "parser.mly"
             ( Intlit( _1 ) )
# 1061 "parser.ml"
               : 'primary_c))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 160 "parser.mly"
                    ( Floatlit(_1) )
# 1068 "parser.ml"
               : 'primary_c))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "parser.mly"
           ( [] )
# 1074 "parser.ml"
               : 'expr_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 164 "parser.mly"
             ( List.rev _1 )
# 1081 "parser.ml"
               : 'expr_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "parser.mly"
         ( [_1] )
# 1088 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                        ( _3 :: _1 )
# 1096 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 171 "parser.mly"
              ( Noexpr )
# 1102 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 172 "parser.mly"
           ( _1 )
# 1109 "parser.ml"
               : 'expr_opt))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
