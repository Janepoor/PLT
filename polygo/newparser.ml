type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LBRACKET
  | RBRACKET
  | LLBRACKET
  | RRBRACKET
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | PLUSONE
  | MINUSONE
  | MODULUS
  | VB
  | ASSIGN
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | NOT
  | RETURN
  | IF
  | ELSE
  | FOR
  | FOREACH
  | IN
  | WHILE
  | INT
  | FLOAT
  | BOOL
  | VOID
  | COMPLEX
  | POLY
  | STRING
  | INTLIT of (int)
  | FLOATLIT of (float)
  | ID of (string)
  | STRINGLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "newparser.mly"
 open Ast 
# 57 "newparser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LBRACKET *);
  264 (* RBRACKET *);
  265 (* LLBRACKET *);
  266 (* RRBRACKET *);
  267 (* PLUS *);
  268 (* MINUS *);
  269 (* TIMES *);
  270 (* DIVIDE *);
  271 (* PLUSONE *);
  272 (* MINUSONE *);
  273 (* MODULUS *);
  274 (* VB *);
  275 (* ASSIGN *);
  276 (* EQ *);
  277 (* NEQ *);
  278 (* LT *);
  279 (* LEQ *);
  280 (* GT *);
  281 (* GEQ *);
  282 (* TRUE *);
  283 (* FALSE *);
  284 (* AND *);
  285 (* OR *);
  286 (* NOT *);
  287 (* RETURN *);
  288 (* IF *);
  289 (* ELSE *);
  290 (* FOR *);
  291 (* FOREACH *);
  292 (* IN *);
  293 (* WHILE *);
  294 (* INT *);
  295 (* FLOAT *);
  296 (* BOOL *);
  297 (* VOID *);
  298 (* COMPLEX *);
  299 (* POLY *);
  300 (* STRING *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  301 (* INTLIT *);
  302 (* FLOATLIT *);
  303 (* ID *);
  304 (* STRINGLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\005\000\005\000\005\000\
\005\000\009\000\009\000\009\000\010\000\010\000\011\000\011\000\
\006\000\006\000\007\000\007\000\003\000\003\000\003\000\003\000\
\008\000\008\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\020\000\020\000\012\000\012\000\012\000\012\000\012\000\013\000\
\013\000\022\000\022\000\021\000\021\000\021\000\019\000\019\000\
\019\000\024\000\024\000\023\000\023\000\018\000\018\000\017\000\
\017\000\016\000\016\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\005\000\001\000\003\000\
\000\000\001\000\000\000\002\000\003\000\005\000\006\000\010\000\
\001\000\002\000\002\000\002\000\003\000\007\000\011\000\011\000\
\007\000\007\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\002\000\002\000\004\000\003\000\
\001\000\003\000\001\000\003\000\001\000\001\000\001\000\000\000\
\001\000\001\000\003\000\001\000\005\000\001\000\001\000\004\000\
\004\000\000\000\001\000\001\000\001\000\000\000\001\000\001\000\
\003\000\000\000\001\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\084\000\000\000\010\000\011\000\007\000\012\000\
\009\000\008\000\001\000\003\000\004\000\000\000\000\000\000\000\
\000\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\015\000\000\000\000\000\000\000\062\000\061\000\076\000\077\000\
\000\000\063\000\000\000\070\000\059\000\068\000\000\000\013\000\
\000\000\000\000\000\000\000\000\066\000\000\000\000\000\000\000\
\000\000\022\000\000\000\019\000\000\000\016\000\060\000\000\000\
\000\000\000\000\000\000\023\000\000\000\000\000\000\000\067\000\
\000\000\073\000\072\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\020\000\000\000\000\000\035\000\025\000\000\000\000\000\014\000\
\069\000\000\000\000\000\000\000\051\000\053\000\054\000\052\000\
\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\005\000\026\000\027\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\000\036\000\029\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
\041\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\
\000\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\000\034\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\000\032\000"

let yydgoto = "\002\000\
\003\000\004\000\012\000\013\000\022\000\023\000\062\000\083\000\
\015\000\025\000\026\000\084\000\044\000\085\000\086\000\128\000\
\132\000\133\000\087\000\000\000\037\000\046\000\038\000\000\000"

let yysindex = "\010\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\226\254\022\255\098\255\
\029\255\000\000\144\255\010\255\071\255\042\255\099\255\096\255\
\000\000\103\255\061\255\135\255\000\000\000\000\000\000\000\000\
\019\255\000\000\113\255\000\000\000\000\000\000\083\255\000\000\
\129\255\094\255\144\255\140\255\000\000\143\255\146\255\112\255\
\121\255\000\000\008\255\000\000\161\255\000\000\000\000\061\255\
\135\255\168\255\182\255\000\000\184\255\116\255\149\255\000\000\
\175\255\000\000\000\000\061\255\229\000\061\255\229\000\229\000\
\229\000\229\000\089\255\199\255\201\255\159\255\212\255\073\255\
\000\000\166\255\163\255\000\000\000\000\065\001\198\255\000\000\
\000\000\216\255\026\002\220\255\000\000\000\000\000\000\000\000\
\000\000\090\001\229\000\229\000\183\255\229\000\229\000\058\255\
\000\000\000\000\000\000\229\000\229\000\229\000\229\000\229\000\
\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\
\229\000\224\255\000\000\000\000\000\000\049\002\091\002\228\255\
\229\000\072\002\091\002\227\255\233\255\127\255\127\255\000\000\
\000\000\000\000\143\002\143\002\160\255\160\255\160\255\160\255\
\128\002\110\002\091\002\000\000\234\255\229\000\057\255\236\255\
\229\000\000\000\192\000\115\001\192\000\192\000\091\002\200\255\
\229\000\237\255\044\000\210\255\247\255\000\000\000\000\002\000\
\005\000\192\000\192\000\081\000\118\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\204\255\000\000\
\000\000\000\000\253\255\000\000\000\000\000\000\000\000\204\255\
\000\000\255\255\009\000\000\000\000\000\000\000\000\000\000\000\
\015\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\014\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\000\000\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\001\
\000\000\000\000\000\000\000\000\000\000\000\000\040\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\000\000\000\000\000\007\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\070\255\000\000\
\000\000\000\000\118\255\014\000\000\000\144\001\173\001\000\000\
\000\000\000\000\003\002\007\002\185\001\214\001\224\001\253\001\
\066\255\009\255\217\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\251\255\000\000\
\017\000\000\000\000\000\155\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\198\000\000\000\003\000\000\000\000\000\211\255\
\043\000\234\000\000\000\002\001\059\000\181\255\187\255\119\000\
\150\000\000\000\254\255\000\000\008\000\000\000\252\255\000\000"

let yytablesize = 936
let yytable = "\091\000\
\011\000\093\000\094\000\095\000\096\000\098\000\014\000\106\000\
\060\000\049\000\001\000\049\000\049\000\027\000\049\000\071\000\
\016\000\036\000\065\000\071\000\071\000\065\000\071\000\047\000\
\036\000\048\000\061\000\049\000\017\000\126\000\127\000\028\000\
\130\000\131\000\045\000\029\000\030\000\049\000\134\000\135\000\
\136\000\137\000\138\000\139\000\140\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\065\000\036\000\031\000\032\000\
\033\000\034\000\018\000\131\000\157\000\024\000\153\000\064\000\
\082\000\036\000\048\000\036\000\048\000\048\000\083\000\048\000\
\083\000\021\000\103\000\045\000\020\000\045\000\039\000\048\000\
\156\000\049\000\028\000\159\000\106\000\024\000\106\000\106\000\
\040\000\097\000\069\000\127\000\027\000\048\000\048\000\070\000\
\106\000\106\000\018\000\019\000\071\000\041\000\042\000\072\000\
\073\000\031\000\032\000\033\000\043\000\160\000\028\000\162\000\
\163\000\050\000\029\000\030\000\020\000\069\000\074\000\027\000\
\080\000\080\000\070\000\080\000\172\000\173\000\090\000\071\000\
\092\000\051\000\072\000\073\000\052\000\031\000\032\000\080\000\
\034\000\028\000\053\000\110\000\111\000\029\000\030\000\112\000\
\055\000\074\000\075\000\076\000\056\000\077\000\078\000\057\000\
\079\000\005\000\006\000\007\000\058\000\008\000\009\000\010\000\
\031\000\032\000\080\000\034\000\069\000\059\000\027\000\105\000\
\063\000\070\000\108\000\109\000\110\000\111\000\071\000\066\000\
\112\000\072\000\073\000\031\000\032\000\005\000\006\000\007\000\
\028\000\008\000\009\000\010\000\029\000\030\000\068\000\067\000\
\074\000\075\000\076\000\088\000\077\000\078\000\089\000\079\000\
\099\000\069\000\100\000\027\000\164\000\101\000\070\000\031\000\
\032\000\080\000\034\000\071\000\104\000\102\000\072\000\073\000\
\121\000\056\000\129\000\056\000\056\000\028\000\056\000\122\000\
\148\000\029\000\030\000\124\000\150\000\074\000\075\000\076\000\
\153\000\077\000\078\000\154\000\079\000\155\000\069\000\158\000\
\027\000\166\000\168\000\070\000\031\000\032\000\080\000\034\000\
\071\000\169\000\006\000\072\000\073\000\081\000\081\000\017\000\
\081\000\018\000\028\000\081\000\082\000\170\000\029\000\030\000\
\171\000\078\000\074\000\075\000\076\000\064\000\077\000\078\000\
\079\000\079\000\064\000\082\000\054\000\035\000\151\000\165\000\
\000\000\031\000\032\000\080\000\034\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\005\000\006\000\
\007\000\000\000\008\000\009\000\010\000\069\000\000\000\027\000\
\167\000\000\000\070\000\000\000\000\000\000\000\000\000\071\000\
\000\000\000\000\072\000\073\000\000\000\000\000\000\000\000\000\
\000\000\028\000\000\000\000\000\000\000\029\000\030\000\000\000\
\000\000\074\000\075\000\076\000\000\000\077\000\078\000\000\000\
\079\000\000\000\069\000\000\000\027\000\174\000\000\000\070\000\
\031\000\032\000\080\000\034\000\071\000\000\000\000\000\072\000\
\073\000\000\000\000\000\000\000\000\000\000\000\028\000\000\000\
\000\000\000\000\029\000\030\000\000\000\000\000\074\000\075\000\
\076\000\000\000\077\000\078\000\000\000\079\000\000\000\069\000\
\000\000\027\000\175\000\000\000\070\000\031\000\032\000\080\000\
\034\000\071\000\000\000\000\000\072\000\073\000\000\000\000\000\
\000\000\000\000\000\000\028\000\000\000\000\000\000\000\029\000\
\030\000\000\000\000\000\074\000\075\000\076\000\000\000\077\000\
\078\000\000\000\079\000\000\000\030\000\000\000\030\000\030\000\
\000\000\030\000\031\000\032\000\080\000\034\000\030\000\000\000\
\000\000\030\000\030\000\000\000\000\000\000\000\000\000\000\000\
\030\000\000\000\000\000\000\000\030\000\030\000\000\000\000\000\
\030\000\030\000\030\000\000\000\030\000\030\000\000\000\030\000\
\000\000\069\000\000\000\027\000\000\000\000\000\070\000\030\000\
\030\000\030\000\030\000\071\000\000\000\000\000\072\000\073\000\
\000\000\000\000\000\000\000\000\000\000\028\000\000\000\000\000\
\000\000\029\000\030\000\000\000\000\000\074\000\075\000\076\000\
\000\000\077\000\078\000\000\000\079\000\000\000\069\000\000\000\
\027\000\000\000\000\000\070\000\031\000\032\000\080\000\034\000\
\071\000\000\000\000\000\072\000\073\000\000\000\000\000\000\000\
\000\000\000\000\028\000\000\000\000\000\000\000\029\000\030\000\
\000\000\000\000\074\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\071\000\000\000\071\000\071\000\000\000\
\071\000\031\000\032\000\080\000\034\000\071\000\071\000\071\000\
\071\000\000\000\000\000\071\000\000\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\000\000\000\000\071\000\071\000\
\070\000\000\000\070\000\070\000\000\000\070\000\000\000\000\000\
\000\000\000\000\070\000\070\000\070\000\070\000\000\000\000\000\
\070\000\000\000\000\000\070\000\070\000\070\000\070\000\070\000\
\070\000\107\000\000\000\070\000\070\000\000\000\000\000\000\000\
\000\000\000\000\000\000\108\000\109\000\110\000\111\000\000\000\
\000\000\112\000\000\000\000\000\113\000\114\000\115\000\116\000\
\117\000\118\000\125\000\000\000\119\000\120\000\000\000\000\000\
\000\000\000\000\000\000\000\000\108\000\109\000\110\000\111\000\
\000\000\000\000\112\000\000\000\000\000\113\000\114\000\115\000\
\116\000\117\000\118\000\161\000\000\000\119\000\120\000\000\000\
\000\000\000\000\000\000\000\000\000\000\108\000\109\000\110\000\
\111\000\000\000\000\000\112\000\000\000\000\000\113\000\114\000\
\115\000\116\000\117\000\118\000\000\000\000\000\119\000\120\000\
\038\000\000\000\038\000\038\000\000\000\038\000\000\000\000\000\
\000\000\000\000\038\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\038\000\038\000\038\000\038\000\
\038\000\000\000\000\000\038\000\038\000\039\000\000\000\039\000\
\039\000\000\000\039\000\000\000\000\000\000\000\000\000\039\000\
\039\000\044\000\000\000\044\000\044\000\000\000\044\000\000\000\
\039\000\039\000\039\000\039\000\039\000\039\000\000\000\000\000\
\039\000\039\000\000\000\000\000\044\000\044\000\044\000\044\000\
\044\000\044\000\000\000\000\000\044\000\044\000\045\000\000\000\
\045\000\045\000\000\000\045\000\000\000\000\000\000\000\000\000\
\046\000\000\000\046\000\046\000\000\000\046\000\000\000\000\000\
\000\000\045\000\045\000\045\000\045\000\045\000\045\000\000\000\
\000\000\045\000\045\000\046\000\046\000\046\000\046\000\046\000\
\046\000\000\000\000\000\046\000\046\000\047\000\000\000\047\000\
\047\000\000\000\047\000\042\000\000\000\042\000\042\000\043\000\
\042\000\043\000\043\000\000\000\043\000\000\000\000\000\000\000\
\047\000\047\000\047\000\047\000\047\000\047\000\042\000\042\000\
\047\000\047\000\043\000\043\000\123\000\000\000\042\000\042\000\
\000\000\000\000\043\000\043\000\108\000\109\000\110\000\111\000\
\000\000\000\000\112\000\000\000\000\000\113\000\114\000\115\000\
\116\000\117\000\118\000\149\000\000\000\119\000\120\000\000\000\
\000\000\000\000\000\000\108\000\109\000\110\000\111\000\000\000\
\000\000\112\000\000\000\000\000\113\000\114\000\115\000\116\000\
\117\000\118\000\152\000\000\000\119\000\120\000\000\000\000\000\
\000\000\000\000\108\000\109\000\110\000\111\000\000\000\000\000\
\112\000\000\000\000\000\113\000\114\000\115\000\116\000\117\000\
\118\000\000\000\000\000\119\000\120\000\108\000\109\000\110\000\
\111\000\000\000\000\000\112\000\000\000\000\000\113\000\114\000\
\115\000\116\000\117\000\118\000\000\000\000\000\119\000\120\000\
\108\000\109\000\110\000\111\000\000\000\000\000\112\000\000\000\
\000\000\113\000\114\000\115\000\116\000\117\000\118\000\000\000\
\000\000\119\000\108\000\109\000\110\000\111\000\000\000\000\000\
\112\000\000\000\000\000\113\000\114\000\115\000\116\000\117\000\
\118\000\108\000\109\000\110\000\111\000\000\000\000\000\112\000\
\000\000\000\000\000\000\000\000\115\000\116\000\117\000\118\000"

let yycheck = "\069\000\
\000\000\071\000\072\000\073\000\074\000\075\000\004\000\083\000\
\001\001\001\001\001\000\003\001\004\001\004\001\006\001\001\001\
\047\001\020\000\005\001\005\001\006\001\008\001\008\001\028\000\
\027\000\007\001\019\001\009\001\007\001\099\000\100\000\022\001\
\102\000\103\000\027\000\026\001\027\001\029\001\108\000\109\000\
\110\000\111\000\112\000\113\000\114\000\115\000\116\000\117\000\
\118\000\119\000\120\000\121\000\057\000\056\000\045\001\046\001\
\047\001\048\001\001\001\129\000\004\001\019\000\006\001\056\000\
\062\000\068\000\001\001\070\000\003\001\004\001\001\001\006\001\
\003\001\045\001\002\001\068\000\019\001\070\000\008\001\007\001\
\150\000\009\001\022\001\153\000\160\000\043\000\162\000\163\000\
\047\001\001\001\002\001\161\000\004\001\028\001\029\001\007\001\
\172\000\173\000\001\001\002\001\012\001\003\001\007\001\015\001\
\016\001\045\001\046\001\047\001\006\001\155\000\022\001\157\000\
\158\000\001\001\026\001\027\001\019\001\002\001\030\001\004\001\
\003\001\004\001\007\001\006\001\170\000\171\000\068\000\012\001\
\070\000\047\001\015\001\016\001\004\001\045\001\046\001\047\001\
\048\001\022\001\045\001\013\001\014\001\026\001\027\001\017\001\
\005\001\030\001\031\001\032\001\006\001\034\001\035\001\006\001\
\037\001\038\001\039\001\040\001\045\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\002\001\045\001\004\001\005\001\
\008\001\007\001\011\001\012\001\013\001\014\001\012\001\008\001\
\017\001\015\001\016\001\045\001\046\001\038\001\039\001\040\001\
\022\001\042\001\043\001\044\001\026\001\027\001\007\001\010\001\
\030\001\031\001\032\001\047\001\034\001\035\001\024\001\037\001\
\002\001\002\001\002\001\004\001\005\001\047\001\007\001\045\001\
\046\001\047\001\048\001\012\001\047\001\002\001\015\001\016\001\
\019\001\001\001\036\001\003\001\004\001\022\001\006\001\008\001\
\001\001\026\001\027\001\008\001\001\001\030\001\031\001\032\001\
\006\001\034\001\035\001\003\001\037\001\004\001\002\001\004\001\
\004\001\005\001\033\001\007\001\045\001\046\001\047\001\048\001\
\012\001\003\001\047\001\015\001\016\001\003\001\004\001\003\001\
\006\001\003\001\022\001\062\000\001\001\004\001\026\001\027\001\
\004\001\003\001\030\001\031\001\032\001\005\001\034\001\035\001\
\003\001\037\001\008\001\003\001\043\000\020\000\129\000\161\000\
\255\255\045\001\046\001\047\001\048\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\255\255\042\001\043\001\044\001\002\001\255\255\004\001\
\005\001\255\255\007\001\255\255\255\255\255\255\255\255\012\001\
\255\255\255\255\015\001\016\001\255\255\255\255\255\255\255\255\
\255\255\022\001\255\255\255\255\255\255\026\001\027\001\255\255\
\255\255\030\001\031\001\032\001\255\255\034\001\035\001\255\255\
\037\001\255\255\002\001\255\255\004\001\005\001\255\255\007\001\
\045\001\046\001\047\001\048\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\255\255\255\255\022\001\255\255\
\255\255\255\255\026\001\027\001\255\255\255\255\030\001\031\001\
\032\001\255\255\034\001\035\001\255\255\037\001\255\255\002\001\
\255\255\004\001\005\001\255\255\007\001\045\001\046\001\047\001\
\048\001\012\001\255\255\255\255\015\001\016\001\255\255\255\255\
\255\255\255\255\255\255\022\001\255\255\255\255\255\255\026\001\
\027\001\255\255\255\255\030\001\031\001\032\001\255\255\034\001\
\035\001\255\255\037\001\255\255\002\001\255\255\004\001\005\001\
\255\255\007\001\045\001\046\001\047\001\048\001\012\001\255\255\
\255\255\015\001\016\001\255\255\255\255\255\255\255\255\255\255\
\022\001\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\030\001\031\001\032\001\255\255\034\001\035\001\255\255\037\001\
\255\255\002\001\255\255\004\001\255\255\255\255\007\001\045\001\
\046\001\047\001\048\001\012\001\255\255\255\255\015\001\016\001\
\255\255\255\255\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\026\001\027\001\255\255\255\255\030\001\031\001\032\001\
\255\255\034\001\035\001\255\255\037\001\255\255\002\001\255\255\
\004\001\255\255\255\255\007\001\045\001\046\001\047\001\048\001\
\012\001\255\255\255\255\015\001\016\001\255\255\255\255\255\255\
\255\255\255\255\022\001\255\255\255\255\255\255\026\001\027\001\
\255\255\255\255\030\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\255\255\003\001\004\001\255\255\
\006\001\045\001\046\001\047\001\048\001\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\029\001\
\001\001\255\255\003\001\004\001\255\255\006\001\255\255\255\255\
\255\255\255\255\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\001\001\255\255\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\001\001\255\255\028\001\029\001\255\255\255\255\
\255\255\255\255\255\255\255\255\011\001\012\001\013\001\014\001\
\255\255\255\255\017\001\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\001\001\255\255\028\001\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\029\001\
\001\001\255\255\003\001\004\001\255\255\006\001\255\255\255\255\
\255\255\255\255\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\255\255\028\001\029\001\001\001\255\255\003\001\
\004\001\255\255\006\001\255\255\255\255\255\255\255\255\011\001\
\012\001\001\001\255\255\003\001\004\001\255\255\006\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\028\001\029\001\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\028\001\029\001\001\001\255\255\
\003\001\004\001\255\255\006\001\255\255\255\255\255\255\255\255\
\001\001\255\255\003\001\004\001\255\255\006\001\255\255\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\255\255\028\001\029\001\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\255\255\028\001\029\001\001\001\255\255\003\001\
\004\001\255\255\006\001\001\001\255\255\003\001\004\001\001\001\
\006\001\003\001\004\001\255\255\006\001\255\255\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\020\001\021\001\
\028\001\029\001\020\001\021\001\003\001\255\255\028\001\029\001\
\255\255\255\255\028\001\029\001\011\001\012\001\013\001\014\001\
\255\255\255\255\017\001\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\003\001\255\255\028\001\029\001\255\255\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\003\001\255\255\028\001\029\001\255\255\255\255\
\255\255\255\255\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\255\255\028\001\029\001\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\029\001\
\011\001\012\001\013\001\014\001\255\255\255\255\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\255\255\028\001\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\255\255\255\255\255\255\255\255\022\001\023\001\024\001\025\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LBRACKET\000\
  RBRACKET\000\
  LLBRACKET\000\
  RRBRACKET\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  PLUSONE\000\
  MINUSONE\000\
  MODULUS\000\
  VB\000\
  ASSIGN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  NOT\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  FOREACH\000\
  IN\000\
  WHILE\000\
  INT\000\
  FLOAT\000\
  BOOL\000\
  VOID\000\
  COMPLEX\000\
  POLY\000\
  STRING\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  FLOATLIT\000\
  ID\000\
  STRINGLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 39 "newparser.mly"
           ( _1 )
# 522 "newparser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 42 "newparser.mly"
                 ( [], [] )
# 528 "newparser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 43 "newparser.mly"
               ( (_2 :: fst _1), snd _1 )
# 536 "newparser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 44 "newparser.mly"
               ( fst _1, (_2 :: snd _1) )
# 544 "newparser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formal_list_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list_rev) in
    Obj.repr(
# 48 "newparser.mly"
     ( typ = _1;
	 fname = _2;
	 formals = _4;
	 locals = List.rev _7;
	 body = List.rev _8  )
# 559 "newparser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ_a) in
    Obj.repr(
# 55 "newparser.mly"
        ( Typ_a( _1 ) )
# 566 "newparser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "newparser.mly"
        ( Bool )
# 572 "newparser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "newparser.mly"
          ( String )
# 578 "newparser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "newparser.mly"
        ( Poly )
# 584 "newparser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "newparser.mly"
     ( Int )
# 590 "newparser.ml"
               : 'typ_a))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "newparser.mly"
         ( Float )
# 596 "newparser.ml"
               : 'typ_a))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "newparser.mly"
           ( Comp )
# 602 "newparser.ml"
               : 'typ_a))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 66 "newparser.mly"
                    ( ( _1,_2, Prim ) )
# 610 "newparser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ_a) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 67 "newparser.mly"
                                         ( (_1,_3, Array) )
# 619 "newparser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 70 "newparser.mly"
                         ( [ _1 ] )
# 626 "newparser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 71 "newparser.mly"
                            ( _3 :: _1 )
# 634 "newparser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "newparser.mly"
                  ( [] )
# 640 "newparser.ml"
               : 'formal_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 75 "newparser.mly"
                 ( List.rev _1 )
# 647 "newparser.ml"
               : 'formal_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "newparser.mly"
   ( [] )
# 653 "newparser.ml"
               : 'vdecl_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 79 "newparser.mly"
                           (_2 :: _1)
# 661 "newparser.ml"
               : 'vdecl_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 82 "newparser.mly"
                                                 ( Primdecl(_1, _2) )
# 669 "newparser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'primary) in
    Obj.repr(
# 83 "newparser.mly"
                                                ( Primdecl_i(_1, _2, _4) )
# 678 "newparser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'typ_a) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 84 "newparser.mly"
                                                                    ( Arrdecl(_1, _5, _3) )
# 687 "newparser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : 'typ_a) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'primary_ap_list_opt) in
    Obj.repr(
# 85 "newparser.mly"
                                                                                       ( Arrdecl_i(_1, _5, _3, List.rev _8) )
# 697 "newparser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 89 "newparser.mly"
      ( _1 )
# 704 "newparser.ml"
               : 'stmt_list_rev))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list_rev) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 90 "newparser.mly"
                      ( _2 :: _1 )
# 712 "newparser.ml"
               : 'stmt_list_rev))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 93 "newparser.mly"
           ( Expr _1 )
# 719 "newparser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "newparser.mly"
               ( Return Noexpr )
# 725 "newparser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 95 "newparser.mly"
                    ( Return _2 )
# 732 "newparser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list_rev) in
    Obj.repr(
# 96 "newparser.mly"
                                                                  ( If( _3, List.rev _6, [] ) )
# 740 "newparser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'stmt_list_rev) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list_rev) in
    Obj.repr(
# 97 "newparser.mly"
                                                                                      ( If( _3, List.rev _6, _10 ) )
# 749 "newparser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list_rev) in
    Obj.repr(
# 98 "newparser.mly"
                                                                                  ( For(_3, _5, _7, List.rev _10 ) )
# 759 "newparser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list_rev) in
    Obj.repr(
# 99 "newparser.mly"
                                                       ( Foreach(_4, List.rev _6) )
# 768 "newparser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list_rev) in
    Obj.repr(
# 100 "newparser.mly"
                                                        ( While(_3, List.rev _6) )
# 776 "newparser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary) in
    Obj.repr(
# 103 "newparser.mly"
              ( Prim( _1 ) )
# 783 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'primary_ap_list_opt) in
    Obj.repr(
# 105 "newparser.mly"
                                           ( Arrlit( _2 ))
# 790 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 106 "newparser.mly"
                      ( _2 )
# 797 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "newparser.mly"
                    ( Binop(_1, Add,   _3) )
# 805 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "newparser.mly"
                    ( Binop(_1, Sub,   _3) )
# 813 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "newparser.mly"
                    ( Binop(_1, Mult,  _3) )
# 821 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "newparser.mly"
                    ( Binop(_1, Div,   _3) )
# 829 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "newparser.mly"
                    ( Binop(_1, Equal, _3) )
# 837 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "newparser.mly"
                    ( Binop(_1, Neq,   _3) )
# 845 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "newparser.mly"
                    ( Binop(_1, Less,  _3) )
# 853 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "newparser.mly"
                    ( Binop(_1, Leq,   _3) )
# 861 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "newparser.mly"
                    ( Binop(_1, Greater, _3) )
# 869 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "newparser.mly"
                    ( Binop(_1, Geq,   _3) )
# 877 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "newparser.mly"
                    ( Binop(_1, And,   _3) )
# 885 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "newparser.mly"
                    ( Binop(_1, Or,    _3) )
# 893 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "newparser.mly"
                     ( Binop(_1, Mod,    _3) )
# 901 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "newparser.mly"
                         ( Unop(Neg, _2) )
# 908 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "newparser.mly"
                    ( Unop(Not, _2) )
# 915 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "newparser.mly"
                ( Unop( Addone, _2 ) )
# 922 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "newparser.mly"
                 ( Unop( Subsone, _2 ) )
# 929 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list_opt) in
    Obj.repr(
# 127 "newparser.mly"
                                  ( Call( _1, _3 ) )
# 937 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'extr_asn_value) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "newparser.mly"
                              ( Asn( _1, _3 ) )
# 945 "newparser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary) in
    Obj.repr(
# 132 "newparser.mly"
           ( [ _1 ] )
# 952 "newparser.ml"
               : 'primary_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'primary_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'primary) in
    Obj.repr(
# 133 "newparser.mly"
                              ( _3 :: _1 )
# 960 "newparser.ml"
               : 'primary_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_ap) in
    Obj.repr(
# 136 "newparser.mly"
                  ( Prim_ap( _1 ) )
# 967 "newparser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'primary_ap_list_opt) in
    Obj.repr(
# 137 "newparser.mly"
                                        ( Poly( _2 ) )
# 974 "newparser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    Obj.repr(
# 138 "newparser.mly"
                    ( BoolLit( false ) )
# 980 "newparser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    Obj.repr(
# 139 "newparser.mly"
                    ( BoolLit( true ) )
# 986 "newparser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 140 "newparser.mly"
               ( Strlit( _1 ) )
# 993 "newparser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "newparser.mly"
   ( [] )
# 999 "newparser.ml"
               : 'primary_ap_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_ap_list) in
    Obj.repr(
# 144 "newparser.mly"
                   ( List.rev _1 )
# 1006 "newparser.ml"
               : 'primary_ap_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_ap) in
    Obj.repr(
# 147 "newparser.mly"
             ( [ _1 ] )
# 1013 "newparser.ml"
               : 'primary_ap_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'primary_ap_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'primary_ap) in
    Obj.repr(
# 148 "newparser.mly"
                                    ( _3 :: _1 )
# 1021 "newparser.ml"
               : 'primary_ap_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_c) in
    Obj.repr(
# 151 "newparser.mly"
             ( Prim_c( _1 ) )
# 1028 "newparser.ml"
               : 'primary_ap))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'primary_c) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'primary_c) in
    Obj.repr(
# 153 "newparser.mly"
                                     ( Comp( _2, _4 ) )
# 1036 "newparser.ml"
               : 'primary_ap))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'extr_asn_value) in
    Obj.repr(
# 154 "newparser.mly"
                      ( Extr( _1 ) )
# 1043 "newparser.ml"
               : 'primary_ap))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 157 "newparser.mly"
       ( Id( _1 ))
# 1050 "newparser.ml"
               : 'extr_asn_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 158 "newparser.mly"
                                   ( Poly_extr_asn( _1, _3 ) )
# 1058 "newparser.ml"
               : 'extr_asn_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 159 "newparser.mly"
                                ( Arr_extr_asn( _1, _3 ) )
# 1066 "newparser.ml"
               : 'extr_asn_value))
; (fun __caml_parser_env ->
    Obj.repr(
# 162 "newparser.mly"
  ( Noexpr )
# 1072 "newparser.ml"
               : 'primary_c_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_c) in
    Obj.repr(
# 163 "newparser.mly"
             ( Prim_c( _1 ) )
# 1079 "newparser.ml"
               : 'primary_c_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 166 "newparser.mly"
             ( Intlit( _1 ) )
# 1086 "newparser.ml"
               : 'primary_c))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 167 "newparser.mly"
                    ( Floatlit(_1) )
# 1093 "newparser.ml"
               : 'primary_c))
; (fun __caml_parser_env ->
    Obj.repr(
# 170 "newparser.mly"
           ( [] )
# 1099 "newparser.ml"
               : 'expr_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 171 "newparser.mly"
             ( List.rev _1 )
# 1106 "newparser.ml"
               : 'expr_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 174 "newparser.mly"
         ( [_1] )
# 1113 "newparser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "newparser.mly"
                        ( _3 :: _1 )
# 1121 "newparser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 178 "newparser.mly"
              ( Noexpr )
# 1127 "newparser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "newparser.mly"
           ( _1 )
# 1134 "newparser.ml"
               : 'expr_opt))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
